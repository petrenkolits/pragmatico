buildscript {
  repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
    classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
    classpath "org.grails.plugins:views-gradle:1.1.6"
  }
}

version "0.1"
group "pragmatico"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "com.energizedwork.webdriver-binaries"
apply plugin: "com.energizedwork.idea-project-components"
apply plugin: "org.grails.plugins.views-json"

repositories {
  mavenLocal()
  maven { url "https://repo.grails.org/grails/core" }

}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:views-json"
  compile "org.grails.plugins:views-json-templates"
  compile "org.grails.plugins:mongodb:6.1.4"
  compile "io.jsonwebtoken:jjwt:0.9.0"
  compile 'org.grails.plugins:quartz:2.0.13'
  compile 'org.grails:grails-datastore-rest-client:5.0.0.RC2'
  console "org.grails:grails-console"
  profile "org.grails.profiles:rest-api"
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "org.springframework.boot:spring-boot-starter-jetty"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails:grails-datastore-rest-client"
  testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb"
  testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
  testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
  testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
  testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"
}

bootRun {
  jvmArgs('-Dspring.output.ansi.enabled=always')
  addResources = true
}

webdriverBinaries {
  chromedriver '2.32'
  geckodriver '0.18.0'
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


//static String getDockerImageName() {
//  "pragmatico-api"
//}
//
//task buildDockerImage(type:Exec) {
//  group = 'docker'
//  description = 'Build a docker image'
//  commandLine 'docker', 'build', '-f', 'build/docker/Dockerfile', '-t', "${dockerImageName}", 'build/docker'
//
//  doFirst {
//    println ">> Creating image: ${dockerImageName}"
//    /* copy the generate war file to /build/docker/app */
//    copy {
//      from war.archivePath
//      into 'build/docker/app/'
//    }
//    /* copy artifacts from src/main/docker/app into the build/docker/app */
//    copy {
//      from 'src/main/docker/app/'
//      into 'build/docker/app'
//    }
//    /* copy Dockerfile from src/main/docker into the build/docker */
//    copy {
//      from('src/main/docker/') {
//        include 'Dockerfile'
//      }
//      into 'build/docker'
//    }
//    /* rename war file to application.jar */
//    file("build/docker/app/${war.archiveName}").renameTo("build/docker/app/application.jar")
//  }
//}
